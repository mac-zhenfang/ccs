[user flow to find out a specific contact]
	1. User search "Stanley who has meeting with me"
	2. "Parser" module translate to
		a. startp: Me
		b. relation: meeting
		c. endp: Stanley
	3. ContactStore get startp and use "Me" dictionay to find "Me" is "Mac Fang - Id : xxxx-xxxx-xxxx-xxxx
	4. ActivityTypeStore get relation and find the verbs of "meeting"
	5. ContactStore stanley and search out a list of Contacts who has the First Name: "Stanley"
	6. SocialGraphStore use the id from step 3 to find out the start Vertex (Mac Fang)
	7. SocialGraphStore use verb from step 4 (join, start) to find out the meetings and its Vertex who is similar with the user  "Stanley"
	8. Return User "Stanley"

[Fake data: ContactStore]
	1. Get contacts from Linkin
	2. Fake Mac Fang into the linkin
	3. Fake 3 times of fake contacts after the relation has been created, like "Stanley 2", "Stanley 3"
	
[Fake data: ActivityType]
	1. Use the "Verb" file (assume this is a Enum)
	2. The Verb is associated with the ObjectType. E.g, meeting has 2 verbs: start join
	3. main Verb: main verb means for 1 object type, the verb can only occures for once. (this is urgly hardcode, need to change in future)

[Fake data: ActivityStream]
	1. ActivityStream is to provide the activities happen in the social network, E.g, Mac has meeting with Stanley
	2. The activity stream SPEC is in the templates/activitystream.ftl
	3. Imitate all the Target source from the ActivityType, default is 2000 targets
	4. Imitate all the relations between Target and Contact, default is 5

[Fake data: SocialGraphStore]
	1. Create Vertex of all the Contact
	2. Create Vertex of all the Targets (